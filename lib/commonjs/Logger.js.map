{"version":3,"sources":["Logger.ts"],"names":["nextXHRId","Logger","requests","callback","xhrIndex","undefined","requestIndex","length","xhrIdMap","index","update","networkInfo","getRequest","Object","assign","method","url","xhr","_index","newRequest","NetworkRequestInfo","maxRequests","pop","unshift","header","value","requestHeaders","responseContentType","responseSize","responseHeaders","updateRequest","data","startTime","Date","now","dataSent","status","timeout","response","responseURL","responseType","endTime","options","XHRInterceptor","isInterceptorEnabled","console","warn","setOpenCallback","openCallback","setRequestHeaderCallback","requestHeadersCallback","setHeaderReceivedCallback","headerReceivedCallback","setSendCallback","sendCallback","setResponseCallback","responseCallback","enableInterception"],"mappings":"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","sourcesContent":["import XHRInterceptor from 'react-native/Libraries/Network/XHRInterceptor';\nimport NetworkRequestInfo from './NetworkRequestInfo';\nimport { Headers, RequestMethod, StartNetworkLoggingOptions } from './types';\nlet nextXHRId = 0;\n\ntype XHR = {\n  _index: number;\n  responseHeaders?: Headers;\n};\n\nexport default class Logger {\n  private requests: NetworkRequestInfo[] = [];\n  private xhrIdMap: { [key: number]: number } = {};\n  private maxRequests: number = 500;\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  callback = (requests: any[]) => {};\n\n  setCallback = (callback: any) => {\n    this.callback = callback;\n  };\n\n  private getRequest = (xhrIndex?: number) => {\n    if (xhrIndex === undefined) return undefined;\n    const requestIndex = this.requests.length - this.xhrIdMap[xhrIndex] - 1;\n    return this.requests[requestIndex];\n  };\n\n  private updateRequest = (\n    index: number,\n    update: Partial<NetworkRequestInfo>\n  ) => {\n    const networkInfo = this.getRequest(index);\n    if (!networkInfo) return;\n    Object.assign(networkInfo, update);\n  };\n\n  private openCallback = (method: RequestMethod, url: string, xhr: XHR) => {\n    xhr._index = nextXHRId++;\n    const xhrIndex = this.requests.length;\n    this.xhrIdMap[xhr._index] = xhrIndex;\n\n    const newRequest = new NetworkRequestInfo(\n      `${nextXHRId}`,\n      'XMLHttpRequest',\n      method,\n      url\n    );\n\n    if (this.requests.length >= this.maxRequests) {\n      this.requests.pop();\n    }\n\n    this.requests.unshift(newRequest);\n  };\n\n  private requestHeadersCallback = (\n    header: string,\n    value: string,\n    xhr: XHR\n  ) => {\n    const networkInfo = this.getRequest(xhr._index);\n    if (!networkInfo) return;\n    networkInfo.requestHeaders[header] = value;\n  };\n\n  private headerReceivedCallback = (\n    responseContentType: string,\n    responseSize: number,\n    responseHeaders: Headers,\n    xhr: XHR\n  ) => {\n    this.updateRequest(xhr._index, {\n      responseContentType,\n      responseSize,\n      responseHeaders: xhr.responseHeaders,\n    });\n  };\n\n  private sendCallback = (data: string, xhr: XHR) => {\n    this.updateRequest(xhr._index, {\n      startTime: Date.now(),\n      dataSent: data,\n    });\n    this.callback(this.requests);\n  };\n\n  private responseCallback = (\n    status: number,\n    timeout: number,\n    response: string,\n    responseURL: string,\n    responseType: string,\n    xhr: XHR\n  ) => {\n    this.updateRequest(xhr._index, {\n      endTime: Date.now(),\n      status,\n      timeout,\n      response,\n      responseURL,\n      responseType,\n    });\n    this.callback(this.requests);\n  };\n\n  enableXHRInterception = (options?: StartNetworkLoggingOptions) => {\n    if (XHRInterceptor.isInterceptorEnabled()) {\n      return;\n    }\n\n    if (options?.maxRequests !== undefined) {\n      if (typeof options.maxRequests !== 'number' || options.maxRequests < 1) {\n        console.warn(\n          'react-native-network-logger: maxRequests must be a number greater than 0. The logger has not been started.'\n        );\n        return;\n      }\n      this.maxRequests = options.maxRequests;\n    }\n\n    XHRInterceptor.setOpenCallback(this.openCallback);\n    XHRInterceptor.setRequestHeaderCallback(this.requestHeadersCallback);\n    XHRInterceptor.setHeaderReceivedCallback(this.headerReceivedCallback);\n    XHRInterceptor.setSendCallback(this.sendCallback);\n    XHRInterceptor.setResponseCallback(this.responseCallback);\n\n    XHRInterceptor.enableInterception();\n  };\n\n  getRequests = () => {\n    return this.requests;\n  };\n\n  clearRequests = () => {\n    this.requests = [];\n    this.callback(this.requests);\n  };\n}\n"]}