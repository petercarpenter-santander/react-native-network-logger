{"version":3,"sources":["RequestDetails.tsx"],"names":["Headers","title","headers","styles","themedStyles","JSON","stringify","content","Object","entries","map","name","value","headerContainer","headerKey","headerValue","LargeText","children","Platform","OS","largeContent","RequestDetails","request","onClose","responseBody","setResponseBody","body","getResponseBody","requestBody","getRequestBody","getFullRequest","response","parse","processedRequest","duration","container","info","scrollView","requestHeaders","responseHeaders","Share","share","message","curlRequest","close","theme","StyleSheet","create","flex","backgroundColor","colors","background","justifyContent","alignItems","paddingBottom","margin","position","right","top","width","flexDirection","flexWrap","fontWeight","color","text","fontSize","card","padding","maxHeight"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport {\n  View,\n  Text,\n  StyleSheet,\n  ScrollView,\n  Share,\n  TextInput,\n  Platform,\n} from 'react-native';\nimport NetworkRequestInfo from '../NetworkRequestInfo';\nimport { useThemedStyles, Theme } from '../theme';\nimport { backHandlerSet } from '../backHandler';\nimport ResultItem from './ResultItem';\nimport Header from './Header';\nimport Button from './Button';\n\ninterface Props {\n  request: NetworkRequestInfo;\n  onClose(): void;\n}\n\nconst Headers = ({\n  title = 'Headers',\n  headers,\n}: {\n  title: string;\n  headers?: Object;\n}) => {\n  const styles = useThemedStyles(themedStyles);\n  return (\n    <View>\n      <Header shareContent={headers && JSON.stringify(headers, null, 2)}>\n        {title}\n      </Header>\n      <View style={styles.content}>\n        {Object.entries(headers || {}).map(([name, value]) => (\n          <View style={styles.headerContainer} key={name}>\n            <Text style={styles.headerKey}>{name}: </Text>\n            <Text style={styles.headerValue}>{value}</Text>\n          </View>\n        ))}\n      </View>\n    </View>\n  );\n};\n\nconst LargeText: React.FC<{ children: string }> = ({ children }) => {\n  const styles = useThemedStyles(themedStyles);\n\n  if (Platform.OS === 'ios') {\n    /**\n     * A readonly TextInput is used because large Text blocks sometimes don't render on iOS\n     * See this issue https://github.com/facebook/react-native/issues/19453\n     * Note: Even with the fix mentioned in the comments, text with ~10,000 lines still fails to render\n     */\n    return (\n      <TextInput\n        style={[styles.content, styles.largeContent]}\n        multiline\n        editable={false}\n      >\n        {children}\n      </TextInput>\n    );\n  }\n\n  return (\n    <View style={styles.largeContent}>\n      <ScrollView nestedScrollEnabled>\n        <View>\n          <Text style={styles.content}>{children}</Text>\n        </View>\n      </ScrollView>\n    </View>\n  );\n};\n\nconst RequestDetails: React.FC<Props> = ({ request, onClose }) => {\n  const [responseBody, setResponseBody] = useState('Loading...');\n  const styles = useThemedStyles(themedStyles);\n\n  useEffect(() => {\n    (async () => {\n      const body = await request.getResponseBody();\n      setResponseBody(body);\n    })();\n  }, [request]);\n\n  const requestBody = request.getRequestBody();\n\n  const getFullRequest = () => {\n    let response;\n    if (responseBody) {\n      try {\n        response = JSON.parse(responseBody);\n      } catch {\n        response = `${responseBody}`;\n      }\n    }\n    const processedRequest = {\n      ...request,\n      response,\n      duration: request.duration,\n    };\n    return JSON.stringify(processedRequest, null, 2);\n  };\n\n  return (\n    <View style={styles.container}>\n      <ResultItem request={request} style={styles.info} />\n      <ScrollView style={styles.scrollView} nestedScrollEnabled>\n        <Headers title=\"Request Headers\" headers={request.requestHeaders} />\n        <Header shareContent={requestBody}>Request Body</Header>\n        <LargeText>{requestBody}</LargeText>\n        <Headers title=\"Response Headers\" headers={request.responseHeaders} />\n        <Header shareContent={responseBody}>Response Body</Header>\n        <LargeText>{responseBody}</LargeText>\n        <Header>More</Header>\n        <Button\n          onPress={() => Share.share({ message: getFullRequest() })}\n          fullWidth\n        >\n          Share full request\n        </Button>\n        <Button\n          onPress={() => Share.share({ message: request.curlRequest })}\n          fullWidth\n        >\n          Share as cURL\n        </Button>\n      </ScrollView>\n      {!backHandlerSet() && (\n        <Button onPress={onClose} style={styles.close}>\n          Close\n        </Button>\n      )}\n    </View>\n  );\n};\n\nconst themedStyles = (theme: Theme) =>\n  StyleSheet.create({\n    container: {\n      flex: 1,\n      backgroundColor: theme.colors.background,\n      justifyContent: 'center',\n      alignItems: 'center',\n      paddingBottom: 10,\n    },\n    info: {\n      margin: 0,\n    },\n    close: {\n      position: 'absolute',\n      right: 10,\n      top: 0,\n    },\n    scrollView: {\n      width: '100%',\n    },\n    headerContainer: { flexDirection: 'row', flexWrap: 'wrap' },\n    headerKey: { fontWeight: 'bold', color: theme.colors.text },\n    headerValue: { color: theme.colors.text },\n    text: {\n      fontSize: 16,\n      color: theme.colors.text,\n    },\n    content: {\n      backgroundColor: theme.colors.card,\n      padding: 10,\n      color: theme.colors.text,\n    },\n    largeContent: {\n      maxHeight: 300,\n    },\n  });\n\nexport default RequestDetails;\n"]}