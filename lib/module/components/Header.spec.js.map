{"version":3,"sources":["Header.spec.tsx"],"names":["React","render","act","fireEvent","Header","Share","jest","mock","share","fn","test","getByTestId","queryByTestId","expect","props","children","toEqual","toBeNull","toBeDefined","press","toHaveBeenCalledWith","message"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,MAAT,EAAiBC,GAAjB,EAAsBC,SAAtB,QAAuC,+BAAvC;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,SAASC,KAAT,QAAsB,cAAtB;AAEAC,IAAI,CAACC,IAAL,CAAU,oCAAV,EAAgD,OAAO;AAAEC,EAAAA,KAAK,EAAEF,IAAI,CAACG,EAAL;AAAT,CAAP,CAAhD;AACAH,IAAI,CAACC,IAAL,CACE,8DADF,EAEE,MAAM,kBAFR;AAKAG,IAAI,CAAC,6BAAD,EAAgC,MAAM;AACxC,QAAM;AAAEC,IAAAA,WAAF;AAAeC,IAAAA;AAAf,MAAiCX,MAAM,eAAC,oBAAC,MAAD,mBAAD,CAA7C;AAEAY,EAAAA,MAAM,CAACF,WAAW,CAAC,aAAD,CAAX,CAA2BG,KAA3B,CAAiCC,QAAlC,CAAN,CAAkDC,OAAlD,CAA0D,UAA1D;AACAH,EAAAA,MAAM,CAACD,aAAa,CAAC,cAAD,CAAd,CAAN,CAAsCK,QAAtC;AACD,CALG,CAAJ;AAOAP,IAAI,CAAC,+CAAD,EAAkD,YAAY;AAChE,QAAM;AAAEC,IAAAA;AAAF,MAAkBV,MAAM,eAC5B,oBAAC,MAAD;AAAQ,IAAA,YAAY,EAAC;AAArB,gBAD4B,CAA9B;AAIAY,EAAAA,MAAM,CAACF,WAAW,CAAC,aAAD,CAAX,CAA2BG,KAA3B,CAAiCC,QAAlC,CAAN,CAAkDC,OAAlD,CAA0D,UAA1D;AACAH,EAAAA,MAAM,CAACF,WAAW,CAAC,cAAD,CAAZ,CAAN,CAAoCO,WAApC;AAEAhB,EAAAA,GAAG,CAAC,MAAM;AACRC,IAAAA,SAAS,CAACgB,KAAV,CAAgBR,WAAW,CAAC,cAAD,CAA3B;AACD,GAFE,CAAH;AAIAE,EAAAA,MAAM,CAACR,KAAK,CAACG,KAAP,CAAN,CAAoBY,oBAApB,CAAyC;AAAEC,IAAAA,OAAO,EAAE;AAAX,GAAzC;AACD,CAbG,CAAJ;AAeAX,IAAI,CAAC,wDAAD,EAA2D,YAAY;AACzE,QAAM;AAAEC,IAAAA,WAAF;AAAeC,IAAAA;AAAf,MAAiCX,MAAM,eAC3C,oBAAC,MAAD;AAAQ,IAAA,YAAY,EAAC;AAArB,gBAD2C,CAA7C;AAIAY,EAAAA,MAAM,CAACF,WAAW,CAAC,aAAD,CAAX,CAA2BG,KAA3B,CAAiCC,QAAlC,CAAN,CAAkDC,OAAlD,CAA0D,UAA1D;AACAH,EAAAA,MAAM,CAACD,aAAa,CAAC,cAAD,CAAd,CAAN,CAAsCK,QAAtC;AACD,CAPG,CAAJ","sourcesContent":["import React from 'react';\nimport { render, act, fireEvent } from '@testing-library/react-native';\nimport Header from './Header';\nimport { Share } from 'react-native';\n\njest.mock('react-native/Libraries/Share/Share', () => ({ share: jest.fn() }));\njest.mock(\n  'react-native/Libraries/Components/Touchable/TouchableOpacity',\n  () => 'TouchableOpacity'\n);\n\ntest('it renders header correctly', () => {\n  const { getByTestId, queryByTestId } = render(<Header>My Title</Header>);\n\n  expect(getByTestId('header-text').props.children).toEqual('My Title');\n  expect(queryByTestId('header-share')).toBeNull();\n});\n\ntest('share button renders when provided with value', async () => {\n  const { getByTestId } = render(\n    <Header shareContent=\"share me\">My Title</Header>\n  );\n\n  expect(getByTestId('header-text').props.children).toEqual('My Title');\n  expect(getByTestId('header-share')).toBeDefined();\n\n  act(() => {\n    fireEvent.press(getByTestId('header-share'));\n  });\n\n  expect(Share.share).toHaveBeenCalledWith({ message: 'share me' });\n});\n\ntest(\"share button doesn't render if content is empty string\", async () => {\n  const { getByTestId, queryByTestId } = render(\n    <Header shareContent=\"\">My Title</Header>\n  );\n\n  expect(getByTestId('header-text').props.children).toEqual('My Title');\n  expect(queryByTestId('header-share')).toBeNull();\n});\n"]}